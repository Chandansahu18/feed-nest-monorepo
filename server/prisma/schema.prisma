// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  name               String
  userName           String?
  isEmailVerified    Boolean              @default(false)
  hashedPassword     String?
  avatar             String?
  profileBanner      String?
  bio                String?
  linkedInHandle     String?
  twitterHandle      String?
  githubHandle       String?
  refreshToken       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  posts              Post[]
  savedPosts         SavedPost[]
  followingRelations FollowingRelations[]
  postLikes          PostLike[]
  postComments       PostComment[]
}

model Post {
  id              String        @id @default(uuid())
  postBannerImage String?
  postTitle       String
  postDescription String?
  published       Boolean       @default(false)
  postTags        String[]      @default([])
  creator         User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  postLikes       PostLike[]
  savedPosts      SavedPost[]
  postComments    PostComment[]
}

model PostLike {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model PostComment {
  id        String   @id @default(uuid())
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  commentId String?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedPost {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model FollowingRelations {
  id              String @id @default(uuid())
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  followingUserId String
}
